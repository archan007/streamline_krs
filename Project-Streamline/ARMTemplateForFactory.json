{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Project-Streamline"
		},
		"SnowflakeKRS_UK_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SnowflakeKRS_UK'"
		},
		"SF_SNW_STRMLN_KRSUK_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SF_SNW_STRMLN_KRSUK'"
		},
		"Salesforce_sandbox_clientSecret": {
			"type": "secureString",
			"metadata": "Secure string for 'clientSecret' of 'Salesforce_sandbox'"
		},
		"SnowflakeKRS_UK_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "D_STRM_DB"
		},
		"SnowflakeKRS_UK_properties_typeProperties_role": {
			"type": "string",
			"defaultValue": "SYSADMIN"
		},
		"SnowflakeKRS_UK_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "keyruspartner.eu-west-1.snowflakecomputing.com"
		},
		"Salesforce_sandbox_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://keyrus--preprod.sandbox.my.salesforce.com"
		},
		"Salesforce_sandbox_properties_typeProperties_clientId": {
			"type": "string",
			"defaultValue": "3MVG9f4Sg6xGHZYqZiMZ19iWWp9PQL_D6F2eqkog17h4u7Y5nx58Dap6uOXVPiqBFkB46W4bqX.WRLn1QZVT0"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SFDC to Snowflake')]",
			"type": "Microsoft.DataFactory/factories/templates",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeKRS_UK')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Keyrus UK snowflake instance",
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "keyruspartner.eu-west-1",
					"user": "KEYRUS_DEVELOPER",
					"database": "[parameters('SnowflakeKRS_UK_properties_typeProperties_database')]",
					"warehouse": "KEYRUS_USERS_WH",
					"role": "[parameters('SnowflakeKRS_UK_properties_typeProperties_role')]",
					"host": "[parameters('SnowflakeKRS_UK_properties_typeProperties_host')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SnowflakeKRS_UK_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SF_SNW_STRMLN_KRSUK')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('SF_SNW_STRMLN_KRSUK_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce_sandbox')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SalesforceV2",
				"typeProperties": {
					"environmentUrl": "[parameters('Salesforce_sandbox_properties_typeProperties_environmentUrl')]",
					"clientId": "[parameters('Salesforce_sandbox_properties_typeProperties_clientId')]",
					"clientSecret": {
						"type": "SecureString",
						"value": "[parameters('Salesforce_sandbox_clientSecret')]"
					},
					"apiVersion": "54.0",
					"authenticationType": "OAuth2ClientCredential"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PREPARE_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SnowflakeKRS_UK",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Migration Sets"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "Id",
						"type": "VARCHAR"
					},
					{
						"name": "IsDeleted",
						"type": "BOOLEAN"
					},
					{
						"name": "MasterRecordId",
						"type": "VARCHAR"
					},
					{
						"name": "Name",
						"type": "VARCHAR"
					},
					{
						"name": "Title",
						"type": "VARCHAR"
					},
					{
						"name": "Company",
						"type": "VARCHAR"
					},
					{
						"name": "Address",
						"type": "VARCHAR"
					},
					{
						"name": "Phone",
						"type": "VARCHAR"
					},
					{
						"name": "Email",
						"type": "VARCHAR"
					},
					{
						"name": "Website",
						"type": "VARCHAR"
					},
					{
						"name": "PhotoUrl",
						"type": "VARCHAR"
					},
					{
						"name": "Description",
						"type": "VARCHAR"
					},
					{
						"name": "LeadSource",
						"type": "VARCHAR"
					},
					{
						"name": "Status",
						"type": "VARCHAR"
					},
					{
						"name": "Industry",
						"type": "VARCHAR"
					},
					{
						"name": "Rating",
						"type": "VARCHAR"
					},
					{
						"name": "AnnualRevenue",
						"type": "FLOAT",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "NumberOfEmployees",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "OwnerId",
						"type": "VARCHAR"
					},
					{
						"name": "IsConverted",
						"type": "BOOLEAN"
					},
					{
						"name": "ConvertedDate",
						"type": "DATE"
					},
					{
						"name": "ConvertedAccountId",
						"type": "VARCHAR"
					},
					{
						"name": "ConvertedContactId",
						"type": "VARCHAR"
					},
					{
						"name": "ConvertedOpportunityId",
						"type": "VARCHAR"
					},
					{
						"name": "IsUnreadByOwner",
						"type": "BOOLEAN"
					},
					{
						"name": "CreatedDate",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "CreatedById",
						"type": "VARCHAR"
					},
					{
						"name": "LastModifiedDate",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "LastModifiedById",
						"type": "VARCHAR"
					},
					{
						"name": "SystemModstamp",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "LastActivityDate",
						"type": "DATE"
					},
					{
						"name": "CampaignId",
						"type": "VARCHAR"
					},
					{
						"name": "LastViewedDate",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "LastReferencedDate",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "UserRecordAccessId",
						"type": "VARCHAR"
					},
					{
						"name": "Jigsaw",
						"type": "VARCHAR"
					},
					{
						"name": "JigsawContactId",
						"type": "VARCHAR"
					},
					{
						"name": "EmailBouncedReason",
						"type": "VARCHAR"
					},
					{
						"name": "EmailBouncedDate",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "IndividualId",
						"type": "VARCHAR"
					},
					{
						"name": "SFSSDupeCatcher__Override_DupeCatcher__c",
						"type": "BOOLEAN"
					},
					{
						"name": "User_IP__c",
						"type": "VARCHAR"
					},
					{
						"name": "Product_of_Interest__c",
						"type": "VARCHAR"
					},
					{
						"name": "sfLma__Subscriber_Org_Type__c",
						"type": "VARCHAR"
					},
					{
						"name": "Product_Metric_Glossary__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Data_Dictionary__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Entity_Diagram__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Data_Governance__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Data_Migration__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Report_Management__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Machine_Learning_AI__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Marketing_Segmentation__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Data_Cloud_Strategy__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Product_Uknown_Product_Needs__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Disqualify_Reason__c",
						"type": "VARCHAR"
					},
					{
						"name": "Activated__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Onboarded__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Invited_User__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Social_Proof__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Social_Influencer__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Authenticated__c",
						"type": "BOOLEAN"
					},
					{
						"name": "Form_Entry_Id__c",
						"type": "FLOAT",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "Form_Name__c",
						"type": "VARCHAR"
					},
					{
						"name": "handlID__c",
						"type": "VARCHAR"
					},
					{
						"name": "traffic_source__c",
						"type": "VARCHAR"
					},
					{
						"name": "organic_source__c",
						"type": "VARCHAR"
					},
					{
						"name": "organic_source_str__c",
						"type": "VARCHAR"
					},
					{
						"name": "handl_original_ref__c",
						"type": "VARCHAR"
					},
					{
						"name": "handl_landing_page__c",
						"type": "VARCHAR"
					},
					{
						"name": "handl_url_base__c",
						"type": "VARCHAR"
					},
					{
						"name": "handl_ref__c",
						"type": "VARCHAR"
					},
					{
						"name": "handl_url__c",
						"type": "VARCHAR"
					},
					{
						"name": "handl_original_ref_domain__c",
						"type": "VARCHAR"
					},
					{
						"name": "handl_ip__c",
						"type": "VARCHAR"
					},
					{
						"name": "user_agent__c",
						"type": "VARCHAR"
					},
					{
						"name": "gaclientid__c",
						"type": "VARCHAR"
					},
					{
						"name": "username__c",
						"type": "VARCHAR"
					},
					{
						"name": "utm_medium__c",
						"type": "VARCHAR"
					},
					{
						"name": "utm_content__c",
						"type": "VARCHAR"
					},
					{
						"name": "utm_term__c",
						"type": "VARCHAR"
					},
					{
						"name": "utm_campaign__c",
						"type": "VARCHAR"
					},
					{
						"name": "first_utm_source__c",
						"type": "VARCHAR"
					},
					{
						"name": "first_utm_campaign__c",
						"type": "VARCHAR"
					},
					{
						"name": "first_utm_medium__c",
						"type": "VARCHAR"
					},
					{
						"name": "first_utm_content__c",
						"type": "VARCHAR"
					},
					{
						"name": "first_utm_term__c",
						"type": "VARCHAR"
					},
					{
						"name": "fbclid__c",
						"type": "VARCHAR"
					},
					{
						"name": "gclid__c",
						"type": "VARCHAR"
					},
					{
						"name": "mscklid__c",
						"type": "VARCHAR"
					},
					{
						"name": "Form_URL__c",
						"type": "VARCHAR"
					},
					{
						"name": "Assessment_URL__c",
						"type": "VARCHAR"
					},
					{
						"name": "Data_Tools_Passcode__c",
						"type": "VARCHAR"
					},
					{
						"name": "Legacy_System_Id__c",
						"type": "VARCHAR"
					},
					{
						"name": "Primary_Persona__c",
						"type": "VARCHAR"
					},
					{
						"name": "Activation_Journey_Status__c",
						"type": "VARCHAR"
					},
					{
						"name": "Original_Ref_Source__c",
						"type": "VARCHAR"
					},
					{
						"name": "Original_Ref_URL__c",
						"type": "VARCHAR"
					},
					{
						"name": "Test_Formula__c",
						"type": "VARCHAR"
					},
					{
						"name": "Country",
						"type": "VARCHAR"
					},
					{
						"name": "State",
						"type": "VARCHAR"
					},
					{
						"name": "Street",
						"type": "VARCHAR"
					},
					{
						"name": "PostalCode",
						"type": "VARCHAR"
					},
					{
						"name": "FirstName",
						"type": "VARCHAR"
					},
					{
						"name": "LastName",
						"type": "VARCHAR"
					},
					{
						"name": "StateCode",
						"type": "VARCHAR"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeKRS_UK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySalesforceObject')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Salesforce_sandbox",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"APIName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Migration Sets"
				},
				"annotations": [],
				"type": "SalesforceV2Object",
				"schema": [],
				"typeProperties": {
					"objectApiName": {
						"value": "@{dataset().APIName}",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Salesforce_sandbox')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataTools Pro SFDC to Snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This template is designed to stage data from Salesforce to Snowflake.",
				"activities": [
					{
						"name": "GenerateSFDCTable_v2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Check Install Status Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GenerateSFDCTable_v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SINKOBJECTS": {
									"value": "@pipeline().parameters.SinkSalesforceObjects",
									"type": "Expression"
								},
								"DATABASENAME": {
									"value": "@pipeline().parameters.DatabaseName",
									"type": "Expression"
								},
								"SCHEMANAME": {
									"value": "@pipeline().parameters.SchemaName",
									"type": "Expression"
								},
								"VERSION": {
									"value": "@pipeline().parameters.VersionNumber",
									"type": "Expression"
								},
								"UPDATE_TABLE": {
									"value": "@pipeline().parameters.AppendFields",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadSFDCData_v2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateSFDCTable_v2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadSFDCData_v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SINKOBJECTS": {
									"value": "@pipeline().parameters.SinkSalesforceObjects",
									"type": "Expression"
								},
								"DATABASENAME": {
									"value": "@pipeline().parameters.DatabaseName",
									"type": "Expression"
								},
								"SCHEMANAME": {
									"value": "@pipeline().parameters.SchemaName",
									"type": "Expression"
								},
								"SNOWERRORHANDLING": {
									"value": "@pipeline().parameters.SnowErrorHandling",
									"type": "Expression"
								},
								"RECORDLIMIT": {
									"value": "@pipeline().parameters.RecordLimit",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Check Install Status Success",
						"description": "Evaluates that the install of stored procedures is successful.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check_Install_Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(first(activity('Check_Install_Exists').output.resultSets).rows[0].TABLE_EXISTS, '1')\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "EnvironmentConfigScripts_v2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "EnvironmentConfigScripts_v2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DATABASENAME": {
												"value": "@pipeline().parameters.DatabaseName",
												"type": "Expression"
											},
											"SCHEMANAME": {
												"value": "@pipeline().parameters.SchemaName",
												"type": "Expression"
											},
											"CREATENEWSCHEMA": {
												"value": "@pipeline().parameters.CreateNewSchema",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Install_Result_Completed",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "EnvironmentConfigScripts_v2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "CheckInstallSuccess",
										"value": "Success: Environment Configured"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Install_Result_Exists",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "CheckInstallSuccess",
										"value": "SKIPPED: Environment previously configured"
									}
								}
							]
						}
					},
					{
						"name": "Check_Install_Exists",
						"description": "Checks to see if the metadata table has been previously installed. Indicates that the environment has been configured.",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeKRS_UK",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(\n  'SELECT COUNT(*) AS TABLE_EXISTS FROM ',pipeline().parameters.DatabaseName,'.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''',pipeline().parameters.SchemaName,''' AND TABLE_NAME = ''', 'SFDC_METADATA_STAGE','''')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSalesforceObjects": {
						"type": "string",
						"defaultValue": "Lead,Account,Opportunity,Contact,Task, Vendor__c"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "D_STRM_DB"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "SF_DATA"
					},
					"ConfigureEnvironment": {
						"type": "string",
						"defaultValue": "yes"
					},
					"CreateNewSchema": {
						"type": "string",
						"defaultValue": "no"
					},
					"AppendFields": {
						"type": "string",
						"defaultValue": "yes"
					},
					"ReBuildTables": {
						"type": "string",
						"defaultValue": "no"
					},
					"SnowErrorHandling": {
						"type": "string",
						"defaultValue": "CONTINUE"
					},
					"RecordLimit": {
						"type": "string",
						"defaultValue": "LIMIT 10000000"
					},
					"VersionNumber": {
						"type": "string",
						"defaultValue": "1.0.1"
					}
				},
				"variables": {
					"CheckInstallSuccess": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DataTools Pro 1 Click Data Lake V2.0.1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/GenerateSFDCTable_v2')]",
				"[concat(variables('factoryId'), '/pipelines/LoadSFDCData_v2')]",
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeKRS_UK')]",
				"[concat(variables('factoryId'), '/pipelines/EnvironmentConfigScripts_v2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenerateSFDCTable_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "New Object Creation Function",
						"description": "This \"for each\" object will process each object in your list, look for new object and add metadata and table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Create Sink Table Set Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('ObjectsArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set ObjectName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ObjectName",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check_Table_Exists",
									"description": "Evaluates snowflake tables to see if this object exists",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set ObjectName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SnowflakeKRS_UK",
										"type": "LinkedServiceReference",
										"parameters": {}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat(\n  'SELECT COUNT(*) AS TABLE_EXISTS FROM ',pipeline().parameters.DATABASENAME,'.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = ''',pipeline().parameters.SCHEMANAME,''' AND TABLE_NAME = ''', variables('ObjectName'),'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "CheckObjectNew",
									"description": "Evaluates if the object lookup in snowflake is NULL. If condition is true functions to create DDL and add table run.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check_Table_Exists",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(first(activity('Check_Table_Exists').output.resultSets).rows[0].TABLE_EXISTS, '1')\n",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Purge Temp Object Metadata",
												"description": "Purges the Salesforce object meta data so new meta data values can be updated",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SnowflakeKRS_UK",
													"type": "LinkedServiceReference",
													"parameters": {}
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('delete from ',pipeline().parameters.DATABASENAME,'.',pipeline().parameters.SCHEMANAME,'.SFDC_METADATA_STAGE_TEMP where ObjectName = ','''',variables('ObjectName'),'''')",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "EXECUTE DDL",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Get DDL Query",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SnowflakeKRS_UK",
													"type": "LinkedServiceReference",
													"parameters": {}
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "NonQuery",
															"text": {
																"value": "@replace(replace(variables('DDLScript'), '\\\\\"', '\"'), '\\\\n', '\\u0010')\n",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Run_DDLFromMetaData",
												"description": "Runs a stored procedure in Snowflake that obtains a DDL for a given Salesforce metadata. Concat from: CALL TABLE.SCHEMA.DDLFromMetaData('Opportunity', 'Name2');",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Call_DDLFROMMETADATA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SnowflakeV2Source",
														"query": {
															"value": "@concat(\n'CALL ',\nvariables('DatabaseName'),\n'.',variables('SchemaName'),'.',\n'DDLFromMetaData(',\n'''',\nvariables('ObjectName'),\n'''',\n', ',\n'''',\n'Name2',\n'''',\n', ',\n'''',\n'Salesforce',\n'''',\n');'\n\n)",
															"type": "Expression"
														},
														"exportSettings": {
															"type": "SnowflakeExportCopyCommand"
														}
													},
													"dataset": {
														"referenceName": "PREPARE_TABLE",
														"type": "DatasetReference",
														"parameters": {
															"TableName": {
																"value": "@variables('ObjectName')",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@pipeline().parameters.SCHEMANAME",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@pipeline().parameters.DATABASENAME",
																"type": "Expression"
															}
														}
													}
												}
											},
											{
												"name": "Get DDL Query",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Run_DDLFromMetaData",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "DDLScript",
													"value": {
														"value": "@json(string(activity('Run_DDLFromMetaData').output.firstRow)).DDLFROMMETADATA\n",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CREATE_TABLE_RESULT-SUCCESS",
												"description": "Table Created",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "EXECUTE DDL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "CREATE_TABLE_RESULT",
													"value": "Success-Table Created"
												}
											},
											{
												"name": "CREATE_TABLE_RESULT- ERROR",
												"description": "Error Creating Table",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "EXECUTE DDL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "CREATE_TABLE_RESULT",
													"value": "Error-Table Not Created"
												}
											},
											{
												"name": "Get SFDC Objet Fields and Type_copy1_copy1",
												"description": "Pulls all fields, types, and object relationships and posts to Snowflake table called SFDC_METADATA_STAGE. Truncates before inserting to ensure we always have freshest metadata from Salesforce",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Purge Temp Object Metadata",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceV2Source",
														"additionalColumns": [
															{
																"name": "ObjectName",
																"value": {
																	"value": "@variables('ObjectName')",
																	"type": "Expression"
																}
															}
														],
														"SOQLQuery": {
															"value": "@concat('SELECT DurableId, EntityDefinitionId, FieldDefinitionId, DataType, DeveloperName, Label, Length, Precision, Scale,RelationshipName,QualifiedApiName,ValueTypeId\nFROM EntityParticle WHERE EntityDefinition.QualifiedApiName =','''',variables('ObjectName'),'''')\n",
															"type": "Expression"
														},
														"includeDeletedObjects": false
													},
													"sink": {
														"type": "SnowflakeV2Sink",
														"importSettings": {
															"type": "SnowflakeImportCopyCommand",
															"storageIntegration": "DQ_CHECK_STORAGE_INT"
														}
													},
													"enableStaging": true,
													"stagingSettings": {
														"linkedServiceName": {
															"referenceName": "SF_SNW_STRMLN_KRSUK",
															"type": "LinkedServiceReference"
														},
														"path": "adf-stage/stage"
													},
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "ObjectName",
																	"type": "String"
																},
																"sink": {
																	"name": "OBJECTNAME",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "QualifiedApiName",
																	"type": "String"
																},
																"sink": {
																	"name": "QUALIFIEDAPINAME",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "DataType",
																	"type": "String"
																},
																"sink": {
																	"name": "DATATYPE",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "DeveloperName",
																	"type": "String"
																},
																"sink": {
																	"name": "DEVELOPERNAME",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "RelationshipName",
																	"type": "String"
																},
																"sink": {
																	"name": "RELATIONSHIPNAME",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "ValueTypeId",
																	"type": "String"
																},
																"sink": {
																	"name": "VALUETYPEID",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "Precision",
																	"type": "Int32"
																},
																"sink": {
																	"name": "PRECISION",
																	"type": "Int64"
																}
															},
															{
																"source": {
																	"name": "Label",
																	"type": "String"
																},
																"sink": {
																	"name": "LABEL",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "DurableId",
																	"type": "String"
																},
																"sink": {
																	"name": "ID",
																	"type": "String"
																}
															},
															{
																"source": {
																	"name": "Length",
																	"type": "Int32"
																},
																"sink": {
																	"name": "LENGTH",
																	"type": "Int64"
																}
															}
														]
													}
												},
												"inputs": [
													{
														"referenceName": "MySalesforceObject",
														"type": "DatasetReference",
														"parameters": {
															"APIName": {
																"value": "@concat(variables('ObjectName'))",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "PREPARE_TABLE",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "SFDC_METADATA_STAGE_TEMP",
															"SchemaName": {
																"value": "@pipeline().parameters.SCHEMANAME",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@pipeline().parameters.DATABASENAME",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Call_DDLFROMMETADATA",
												"description": "",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "UPSERT NEW FIELDS",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "CALL_DDLFROMMETADATA",
													"value": {
														"value": "@concat(\n'CALL ',\npipeline().parameters.DATABASENAME,\n'.',pipeline().parameters.SCHEMANAME,'.',\n'DDLFromMetaData(',\n'''',\nvariables('ObjectName'),\n'''',\n', ',\n'''',\n'Type',\n'''',\n', ',\n'''',\n'Salesforce',\n'''',\n');'\n\n)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "UPSERT NEW FIELDS",
												"description": "Upsert new fields from SFDC_METADATA_STAGE_TEMP into SFDC_METADATA_STAGE",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Set UPSERTMETADATA_STAGE variable",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "SnowflakeKRS_UK",
													"type": "LinkedServiceReference",
													"parameters": {}
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "NonQuery",
															"text": {
																"value": "@variables('UPSERT_METADATA_STAGE')",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Set UPSERTMETADATA_STAGE variable",
												"description": "Concatenates an \"Upsert\" script that, allows you to re-use this pipeline to upsert new fields into your DB. Please review documentation for impact.",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get SFDC Objet Fields and Type_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "UPSERT_METADATA_STAGE",
													"value": {
														"value": "@concat('MERGE INTO ',variables('DatabaseName'),\n'.',variables('SchemaName'),'.','SFDC_METADATA_STAGE AS target USING (SELECT * FROM ', variables('DatabaseName'),'.',variables('SchemaName'),'.','SFDC_METADATA_STAGE_TEMP WHERE ''','yes',''' = ''yes'') AS source ON target.ID = source.ID WHEN MATCHED THEN UPDATE SET target.OBJECTNAME=source.OBJECTNAME,target.QUALIFIEDAPINAME=source.QUALIFIEDAPINAME,target.DATATYPE=source.DATATYPE,target.DEVELOPERNAME=source.DEVELOPERNAME,target.RELATIONSHIPNAME=source.RELATIONSHIPNAME,target.VALUETYPEID=source.VALUETYPEID,target.PRECISION=source.PRECISION,target.LABEL=source.LABEL,target.ID=source.ID,target.LENGTH=source.LENGTH WHEN NOT MATCHED THEN INSERT (OBJECTNAME,QUALIFIEDAPINAME,DATATYPE,DEVELOPERNAME,RELATIONSHIPNAME,VALUETYPEID,PRECISION,LABEL,ID,LENGTH) VALUES (source.OBJECTNAME,source.QUALIFIEDAPINAME,source.DATATYPE,source.DEVELOPERNAME,source.RELATIONSHIPNAME,source.VALUETYPEID,source.PRECISION,source.LABEL,source.ID,source.LENGTH);' )",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "CREATE_TABLE_RESULT",
												"description": "Table already exists",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "CREATE_TABLE_RESULT",
													"value": "Table already exists"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Create Sink Table Set Variable",
						"description": "Pulled from SINKOBJECTS parameter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set SchemaName Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ObjectsArray",
							"value": {
								"value": "@split(pipeline().parameters.SINKOBJECTS,',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DatabaseName Variable",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatabaseName",
							"value": {
								"value": "@pipeline().parameters.DATABASENAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SchemaName Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set DatabaseName Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SchemaName",
							"value": {
								"value": "@pipeline().parameters.SCHEMANAME",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SINKOBJECTS": {
						"type": "string"
					},
					"DATABASENAME": {
						"type": "string"
					},
					"SCHEMANAME": {
						"type": "string"
					},
					"VERSION": {
						"type": "string"
					},
					"UPDATE_TABLE": {
						"type": "string"
					}
				},
				"variables": {
					"ObjectName": {
						"type": "String"
					},
					"DatabaseName": {
						"type": "String"
					},
					"DDLScript": {
						"type": "String"
					},
					"ObjectsArray": {
						"type": "Array"
					},
					"SchemaName": {
						"type": "String"
					},
					"CREATE_TABLE_RESULT": {
						"type": "String"
					},
					"CALL_DDLFROMMETADATA": {
						"type": "String"
					},
					"UPSERT_METADATA_STAGE": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DataTools Pro 1 Click Data Lake V2.0.1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeKRS_UK')]",
				"[concat(variables('factoryId'), '/datasets/PREPARE_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/MySalesforceObject')]",
				"[concat(variables('factoryId'), '/linkedServices/SF_SNW_STRMLN_KRSUK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadSFDCData_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Create Sink Table Set Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('ObjectsArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set ObjectName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ObjectName",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Run_ADFmappingFromSFDCMetaData",
									"description": "Runs a stored procedure in Snowflake that obtains a DDL for a given Salesforce metadata. Concat from: CALL GG_DEVELOPMENT_OPPS.MIGRATION_STAGE.DDLFromMetaData('Opportunity', 'Name2');",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set ObjectName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeV2Source",
											"query": {
												"value": "@concat(\n'CALL ',\nvariables('DatabaseName'),\n'.',variables('SchemaName'),'.',\n'ADFmappingFromSFDCMetaData(',\n'''',\nvariables('ObjectName'),\n'''',\n', ',\n'''',\n'Name2',\n'''',\n');'\n\n)",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "PREPARE_TABLE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@variables('DatabaseName')",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@variables('SchemaName')",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@variables('DatabaseName')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set ADFMetaScript Variable",
									"description": "Pulls SFDC meta data and formats into ADF metadata used for mapping. This ensures the data coming out of Salesforce can be mapped to Snowflake dynamically.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Run_ADFmappingFromSFDCMetaData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ADFMetaScript",
										"value": {
											"value": "@json(string(activity('Run_ADFmappingFromSFDCMetaData').output.firstRow)).ADFMAPPINGFROMSFDCMETADATA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Move Data from SFDC to SNOW",
									"description": "Last step pulls data out of Salesforce, uses the ADFMetaScript to map Salesforce to final Snowflake Table.\n\nBecause meta data is pulled live the 2 systems are always in sync.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set ADFMetaScript Variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceV2Source",
											"includeDeletedObjects": false
										},
										"sink": {
											"type": "SnowflakeV2Sink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE ' ,pipeline().parameters.DATABASENAME,'.',pipeline().parameters.SCHEMANAME,'.',item())}",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand",
												"additionalCopyOptions": {
													"ON_ERROR": "ABORT_STATEMENT"
												},
												"storageIntegration": "DQ_CHECK_STORAGE_INT"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "SF_SNW_STRMLN_KRSUK",
												"type": "LinkedServiceReference"
											},
											"path": "strmlnekrsuk/sf_data"
										},
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "SF_SNW_STRMLN_KRSUK",
													"type": "LinkedServiceReference"
												},
												"path": "strmlnekrsuk/errors"
											}
										},
										"translator": {
											"value": "@variables('ADFMetaScript')",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "MySalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"APIName": {
													"value": "@concat(variables('ObjectName'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "PREPARE_TABLE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@toUpper(variables('ObjectName'))",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@variables('SchemaName')",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@variables('DatabaseName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set DatabaseName Variable",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatabaseName",
							"value": {
								"value": "@pipeline().parameters.DATABASENAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SchemaName",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set DatabaseName Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SchemaName",
							"value": {
								"value": "@pipeline().parameters.SCHEMANAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set RecordLimit Variable",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set SchemaName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecordLimit",
							"value": {
								"value": "@pipeline().parameters.RECORDLIMIT",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Create Sink Table Set Variable",
						"description": "Pulled from SINKOBJECTS parameter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set RecordLimit Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ObjectsArray",
							"value": {
								"value": "@split(pipeline().parameters.SINKOBJECTS,',')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SINKOBJECTS": {
						"type": "string"
					},
					"DATABASENAME": {
						"type": "string"
					},
					"SCHEMANAME": {
						"type": "string"
					},
					"SNOWERRORHANDLING": {
						"type": "object"
					},
					"RECORDLIMIT": {
						"type": "string"
					}
				},
				"variables": {
					"ObjectName": {
						"type": "String"
					},
					"DatabaseName": {
						"type": "String"
					},
					"DDLScript": {
						"type": "String"
					},
					"ObjectsArray": {
						"type": "Array"
					},
					"ADFMetaScript": {
						"type": "String"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "MIGRATION_STAGE"
					},
					"RecordLimit": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DataTools Pro 1 Click Data Lake V2.0.1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PREPARE_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/MySalesforceObject')]",
				"[concat(variables('factoryId'), '/linkedServices/SF_SNW_STRMLN_KRSUK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EnvironmentConfigScripts_v2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateMetaDataStage",
						"description": "Creates a table called SFDC_METADATA_STAGE in your Snowflake schema using fields stored in MetaDataTableObjects variable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CreateMetaDataStage_TEMP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeKRS_UK",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('create or replace TABLE ',variables('DatabaseName'),'.',variables('SchemaName'),'.SFDC_METADATA_STAGE',variables('MetaDataTableObjects'))",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Set DatabaseName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CreateNewSchema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatabaseName",
							"value": {
								"value": "@pipeline().parameters.DATABASENAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SchemaName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set DatabaseName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SchemaName",
							"value": {
								"value": "@pipeline().parameters.SCHEMANAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Install DDL Stored Proc",
						"description": "Install DDL Stored Procecure DDLFromMetaData",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Create LOG TABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeKRS_UK",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "@concat(\n    'CREATE OR REPLACE PROCEDURE ',variables('DatabaseName'),'.',pipeline().parameters.SCHEMANAME,'.DDLFromMetaData',\n    variables('DDLFromMetaData')\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Install ADF Mapping Stored Proc",
						"description": "Install ADF Mapping Stored Procedure ADFmappingFromSFDCMetaData",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Install DDL Stored Proc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeKRS_UK",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "@concat(\n    'CREATE OR REPLACE PROCEDURE ',variables('DatabaseName'),'.',variables('SchemaName'),'.ADFmappingFromSFDCMetaData',\n    variables('ADFmappingFromSFDCMetaData')\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Create LOG TABLE",
						"description": "Creates a table called LOGTABLE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CreateMetaDataStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeKRS_UK",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('create or replace TABLE ',variables('DatabaseName'),'.',variables('SchemaName'),'.LOGTABLE',variables('LOGTABLE'))",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Check Create Schema",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set SchemaName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('CreateNewSchema'), 'yes')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CreateSchema_MetaDataStage_copy1_copy1",
									"description": "Creates a schema called MIGRATION_STAGE in your Snowflake table ",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SnowflakeKRS_UK",
										"type": "LinkedServiceReference",
										"parameters": {}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('create or replace SCHEMA ',variables('DatabaseName'),'.',variables('SchemaName'))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "CreateNewSchema",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CreateNewSchema",
							"value": {
								"value": "@pipeline().parameters.CREATENEWSCHEMA",
								"type": "Expression"
							}
						}
					},
					{
						"name": "INSERT SUCCESS LOG",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Install ADF Mapping Stored Proc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeKRS_UK",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(\n    'INSERT INTO ', variables('DatabaseName'), '.', variables('SchemaName'), '.LOGTABLE ',\n    '(\"JOBDATE\", \"RESULT_TYPE\", \"RESULT\", \"NODE\") SELECT NULL, ''INSTALL'', PARSE_JSON(''{\"result\":\"SUCCESS\",\"version\":\"', pipeline().parameters.VERSION, '\"}''), NULL;'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "CreateMetaDataStage_TEMP",
						"description": "Creates a table called SFDC_METADATA_STAGE_TEMP in your Snowflake schema using fields stored in MetaDataTableObjects variable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Check Create Schema",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SnowflakeKRS_UK",
							"type": "LinkedServiceReference",
							"parameters": {}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('create or replace TABLE ',variables('DatabaseName'),'.',variables('SchemaName'),'.SFDC_METADATA_STAGE_TEMP',variables('MetaDataTableObjects'))",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DATABASENAME": {
						"type": "string"
					},
					"SCHEMANAME": {
						"type": "string"
					},
					"CREATENEWSCHEMA": {
						"type": "string"
					},
					"VERSION": {
						"type": "string"
					}
				},
				"variables": {
					"DatabaseName": {
						"type": "String"
					},
					"MetaDataTableObjects": {
						"type": "String",
						"defaultValue": "(OBJECTNAME VARCHAR(255), QUALIFIEDAPINAME VARCHAR(255), DATATYPE VARCHAR(255), DEVELOPERNAME VARCHAR(255), RELATIONSHIPNAME VARCHAR(255), VALUETYPEID VARCHAR(255), PRECISION NUMBER(38,0), LABEL VARCHAR(255), \tID VARCHAR(255), LENGTH NUMBER(38,0),STATUS VARCHAR(255) );"
					},
					"SchemaName": {
						"type": "String"
					},
					"DDLFromMetaData": {
						"type": "String",
						"defaultValue": "(OBJECTNAME VARCHAR(16777216), EXCLUDE VARCHAR(16777216), SOURCE_DB VARCHAR(16777216)) RETURNS VARCHAR(16777216) LANGUAGE JAVASCRIPT EXECUTE AS OWNER AS $$ var sourceDbNormalized = SOURCE_DB ? SOURCE_DB.toLowerCase() : null; var dataTypeMappings = { \"salesforce\": { \"id\": \"VARCHAR(255)\", \"string\": \"VARCHAR(255)\", \"boolean\": \"BOOLEAN\", \"double\": \"FLOAT\", \"integer\": \"INT\", \"datetime\": \"TIMESTAMP_NTZ\", \"date\": \"DATE\" } }; if (!dataTypeMappings[sourceDbNormalized]) { throw \"Unsupported source database: \" + SOURCE_DB; } var current_database_result = snowflake.execute({ sqlText: \"SELECT CURRENT_DATABASE()\" }); current_database_result.next(); var current_database_value = current_database_result.getColumnValue(1); var current_schema_result = snowflake.execute({ sqlText: \"SELECT CURRENT_SCHEMA()\" }); current_schema_result.next(); var current_schema_value = current_schema_result.getColumnValue(1); var metadata_table = current_database_value + \".\" + current_schema_value + \".SFDC_METADATA_STAGE\"; var sql_command = \"SELECT OBJECTNAME, QUALIFIEDAPINAME, VALUETYPEID, LENGTH FROM \" + metadata_table + \" WHERE  (UPPER(STATUS) != 'DISABLED' OR STATUS IS NULL) AND OBJECTNAME = '\" + OBJECTNAME + \"'\"; if (EXCLUDE && EXCLUDE.trim() !== '') { sql_command += \" AND QUALIFIEDAPINAME NOT IN ('\" + EXCLUDE.replace(/,/g, \"','\") + \"')\"; } var result = snowflake.execute({ sqlText: sql_command }); var column_names = []; var column_types = []; while (result.next()) { column_names.push(result.getColumnValue(\"QUALIFIEDAPINAME\")); var valuetype = result.getColumnValue(\"VALUETYPEID\"); var length = result.getColumnValue(\"LENGTH\"); if (dataTypeMappings[sourceDbNormalized][valuetype]) { var mappedType = dataTypeMappings[sourceDbNormalized][valuetype]; if (mappedType.includes(\"VARCHAR\") && length) { mappedType = \"VARCHAR(\" + length + \")\"; } column_types.push(mappedType); } else { column_types.push(\"VARCHAR(255)\"); } } if (column_names.length === 0) { throw \"No metadata found for OBJECTNAME: \" + OBJECTNAME; } var DDL = \"CREATE OR REPLACE TABLE \" + current_database_value + \".\" + current_schema_value + \".\" + OBJECTNAME + \" (\\n\"; for (var i = 0; i < column_names.length; i++) { DDL += \"  \\\"\" + column_names[i] + \"\\\" \" + column_types[i] + \",\\n\"; } DDL = DDL.slice(0, -2) + \"\\n);\"; return DDL; $$;"
					},
					"ADFmappingFromSFDCMetaData": {
						"type": "String",
						"defaultValue": "(\"OBJECTNAME\" VARCHAR(16777216), \"EXCLUDE\" VARCHAR(16777216)) RETURNS VARCHAR(16777216) LANGUAGE JAVASCRIPT EXECUTE AS OWNER AS 'var current_database_result = snowflake.execute({sqlText: \"SELECT CURRENT_DATABASE()\"});current_database_result.next();var current_database_value = current_database_result.getColumnValue(1);var current_schema_result = snowflake.execute({sqlText: \"SELECT CURRENT_SCHEMA()\"});current_schema_result.next();var current_schema_value = current_schema_result.getColumnValue(1);var metadata_table = current_database_value + \".\" + current_schema_value + \".SFDC_METADATA_STAGE\";var sql = `SELECT OBJECTNAME, QUALIFIEDAPINAME, VALUETYPEID, LENGTH FROM ` + metadata_table + ` WHERE (UPPER(STATUS) != ''DISABLED'' OR STATUS IS NULL) AND OBJECTNAME = ''` + OBJECTNAME + `'' AND QUALIFIEDAPINAME NOT IN (''` + EXCLUDE.split('','').join(\"'',''\") + `'')`;var stmt = snowflake.createStatement({sqlText: sql});var resultSet = stmt.execute();var mappings = [];function valueTypeToDataType(valueType) {switch (valueType) {case \"id\": return \"String\";case \"string\": return \"String\";case \"boolean\": return \"Boolean\";case \"double\": return \"Decimal\";case \"integer\": return \"Integer\";case \"datetime\": return \"Date/Time\";case \"date\": return \"Date/Time\";case \"address\": return \"String\";default: return \"String\";}}while (resultSet.next()) {var qualifiedApiName = resultSet.getColumnValue(2);var valueType = resultSet.getColumnValue(3);var dataType = valueTypeToDataType(valueType);var mapping = {source: {name: qualifiedApiName, type: dataType},sink: {name: qualifiedApiName, type: dataType}};mappings.push(mapping);}var output = {type: \"TabularTranslator\", mappings: mappings};return JSON.stringify(output, null, 2);';"
					},
					"LOGTABLE": {
						"type": "String",
						"defaultValue": "(JOBDATE DATETIME, RESULT_TYPE VARCHAR(255), RESULT VARIANT,NODE VARCHAR(255));"
					},
					"CreateNewSchema": {
						"type": "String"
					}
				},
				"folder": {
					"name": "DataTools Pro 1 Click Data Lake V2.0.1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SnowflakeKRS_UK')]"
			]
		}
	]
}